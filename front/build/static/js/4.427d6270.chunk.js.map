{"version":3,"sources":["../../src/rpc/JrpcClient.ts","../../src/rpc/solanaRpcMiddlewares.ts","../../src/providers/injectedProviders/base/baseInjectedProvider.ts","../../src/providers/injectedProviders/base/providerHandlers.ts","../../src/providers/injectedProviders/injectedProviderProxy.ts","../../src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../../src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../../src/providers/injectedProviders/slope/providerHandlers.ts","../../src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../../src/providers/injectedProviders/solflare/providerHandlers.ts","../../src/providers/injectedProviders/sollet/solletInjectedProvider.ts","../../src/providers/injectedProviders/sollet/providerHandlers.ts","../../src/providers/injectedProviders/torus/providerHandlers.ts","../../src/providers/injectedProviders/torus/torusInjectedProvider.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../../src/solanaWallet.ts","../../src/abstract/utils.ts","utils.ts","../../src/abstract/modular.ts","../node_modules/bs58/index.js","_assert.ts","../../src/Layout.ts","../node_modules/rpc-websockets/node_modules/eventemitter3/index.js","_sha2.ts","_u64.ts","../../src/abstract/curve.ts","../../src/abstract/hash-to-curve.ts","sha256.ts","../../src/abstract/weierstrass.ts","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v1.js","../node_modules/uuid/dist/esm-browser/parse.js","../node_modules/uuid/dist/esm-browser/v35.js","../node_modules/uuid/dist/esm-browser/md5.js","../node_modules/uuid/dist/esm-browser/v3.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/uuid/dist/esm-browser/sha1.js","../node_modules/uuid/dist/esm-browser/v5.js","../node_modules/uuid/dist/esm-browser/nil.js","../node_modules/uuid/dist/esm-browser/version.js","../node_modules/base-x/src/index.js","../node_modules/borsh/lib/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../node_modules/bigint-buffer/dist/browser.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","ed25519.ts","sha512.ts","crypto.ts","../../src/abstract/edwards.ts","../../src/abstract/montgomery.ts","secp256k1.ts","_shortw_utils.ts","hmac.ts","sha3.ts","../../src/utils.ts","../../src/error.ts","../../src/struct.ts","../../src/structs/utilities.ts","../../src/structs/types.ts","../../src/structs/coercions.ts","../../src/utils/ed25519.ts","../../src/utils/to-buffer.ts","../../src/utils/borsh-schema.ts","../../src/publickey.ts","../../src/bpf-loader-deprecated.ts","../../src/account.ts","../../src/transaction/constants.ts","../../src/transaction/expiry-custom-errors.ts","../../src/message/account-keys.ts","../../src/layout.ts","../../src/utils/shortvec-encoding.ts","../../src/utils/assert.ts","../../src/message/compiled-keys.ts","../../src/message/legacy.ts","../../src/message/v0.ts","../../src/transaction/legacy.ts","../../src/sysvar.ts","../../src/utils/send-and-confirm-transaction.ts","../../src/utils/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/utils/bigint.ts","../../src/nonce-account.ts","../../src/programs/system.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../../../node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/__forks__/browser/fetch-impl.ts","../../src/rpc-websocket.ts","../../src/programs/address-lookup-table/state.ts","../../src/account-data.ts","../../src/utils/makeWebsocketUrl.ts","../../src/connection.ts","../../src/keypair.ts","../../src/programs/address-lookup-table/index.ts","../../src/programs/compute-budget.ts","../../src/programs/ed25519.ts","../../src/utils/secp256k1.ts","../../src/programs/secp256k1.ts","../../src/programs/stake.ts","../../src/programs/vote.ts","../../src/validator-info.ts","../../src/vote-account.ts"],"names":["createChainIdMiddleware","chainId","req","res","next","end","method","result","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","createGetAccountsMiddleware","_ref","getAccounts","createAsyncMiddleware","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","response","accounts","wrap","_context","prev","abrupt","Error","sent","undefined","stop","_x","_x2","_x3","apply","arguments","createRequestAccountsMiddleware","_ref3","requestAccounts","_ref4","_callee2","_context2","_x4","_x5","_x6","createGenericJRPCMiddleware","targetMethod","handler","_ref5","_callee3","_context3","concat","_x7","_x8","_x9","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","_BaseProvider","_inherits","_super","_createSuper$6","config","state","_classCallCheck","call","chainConfig","_objectSpread$3","chainNamespace","CHAIN_NAMESPACES","SOLANA","_createClass","key","value","_switchChain","_","Promise","resolve","_setupProvider","injectedProvider","engine","solanaMiddleware","configMiddleware","injectedProviderProxy","provider","JRPCEngine","getProviderHandlers","push","getInjectedProviderProxy","providerFromEngine","updateProviderEngineProxy","lookupNetwork","_lookupNetwork","update","BaseProvider","getBaseProviderHandlers","_requestAccounts","publicKey","bs58","encode","toBytes","_getAccounts","_getPrivateKey","ethErrors","rpc","methodNotSupported","_getSecretKey","_callee4","_context4","_signTransaction","_callee5","transaction","_context5","params","message","_signMessage","_callee6","sigData","_context6","display","signature","_signAllTransactions","_callee7","_req$params","_req$params2","_context7","length","invalidParams","_signAndSendTransaction","_callee8","txRes","_context8","createInjectedProviderProxyMiddleware","_next","_objectSpread$2","PhantomInjectedProvider","_BaseInjectedProvider","_createSuper$5","SlopeInjectedProxyProvider","_createSuper$4","getProviderEngineProxy","_yield$injectedProvid","data","connect","_yield$injectedProvid2","txMessage","_yield$injectedProvid3","invalidRequest","serializeMessage","PublicKey","decode","addSignature","Buffer","from","_yield$injectedProvid4","conn","custom","code","Connection","sendRawTransaction","serialize","_data$signatures","allTxns","unsignedTx","i","_yield$injectedProvid5","msg","signatures","getSlopeHandlers","bind","SolflareInjectedProvider","_createSuper$3","solflareProviderHandlers","getSolflareHandlers","SolletInjectedProvider","_createSuper$2","sign","getSolletHandlers","getTorusHandlers","_req$params3","sendTransaction","_req$params4","_req$params5","transactions","TorusInjectedProvider","_createSuper$1","_objectSpread$1","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","toString","parseInt","WalletInitializationError","rpcConnectionError","emit","_setupEngine","_handleInjectedProviderUpdate","_this","on","configure","setupProvider","_getProviderHandlers","_callee9","privKey","keyPairGenerator","keyPair","_context9","Keypair","fromSecretKey","toBase58","secretKey","partialSign","signedMsg","nacl","detached","_providerEngineProxy","sig","_req$params6","txns","_iterator","_step","tx","_createForOfIteratorHelper","s","n","done","err","e","f","SolanaPrivateKeyProvider","_createSuper","_objectSpread","_enable","privateKey","_createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","_updateAccount","t0","t1","t2","getChainConfig","health","chainSwitchHandlers","addNewChainConfig","_addNewChainConfig","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","name","displayName","blockExplorer","switchSolanaChain","_switchSolanaChain","switchChain","_ref6","createChainSwitchMiddleware","_this2","accountHandlers","updatePrivatekey","_updatePrivatekey","updateAccount","_ref7","createAccountMiddleware","providerFactory","SolanaWallet","_defineProperty","_yield$this$provider$","signedTransaction","signedTransactions","_request","args","_0n","BigInt","_1n","_2n","u8a","a","Uint8Array","hexes","Array","padStart","bytesToHex","bytes","hex","numberToHexUnpadded","num","hexToNumber","hexToBytes","len","array","j","hexByte","slice","byte","Number","isNaN","numberToBytesBE","concatBytes","_len","arrays","_key","r","reduce","sum","pad","forEach","set","exports","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesLE","numberToVarBytesBE","ensureBytes","title","expectedLength","equalBytes","b1","b2","utf8ToBytes","str","TextEncoder","bitLen","bitGet","pos","bitSet","bitMask","u8n","u8fr","arr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","fill","h","_len2","b","_key2","reseed","seed","gen","out","sl","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isSafeInteger","isArray","field","object","Fp","isValid","hash","outputLen","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","_i","_Object$entries","Object","entries","_Object$entries$_i","_slicedToArray","_i2","_Object$entries2","_Object$entries2$_i","require","default","crypto_1","u8","buffer","byteOffset","byteLength","u32","Uint32Array","Math","floor","createView","DataView","rotr","word","shift","isLE","nextTick","_asyncLoop","iters","tick","cb","ts","diff","Date","now","asyncLoop","Hash","_cloneInto","toStr","checkOpts","defaults","opts","assign","wrapConstructor","hashCons","hashC","digest","tmp","blockLen","create","wrapConstructorWithOpts","wrapXOFConstructorWithOpts","randomBytes","bytesLength","crypto","getRandomValues","utils_js_1","_3n","_4n","_5n","_8n","mod","pow","power","modulo","invert","number","x","y","u","q","m","tonelliShanks","P","Q","S","Z","legendreC","p1div4","root","eql","sqr","Q1div2","neg","ONE","g","mul","ZERO","ge","FpSqrt","c1","n2","nv","sub","pow2","isNegativeLE","FIELD_FIELDS","FpPow","p","d","FpInvertBatch","nums","lastMultiplied","acc","is0","inverted","inv","reduceRight","nLength","nBitLength","_nBitLength","nByteLength","ceil","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","validateField","map","ORDER","MASK","BYTES","BITS","FpDiv","lhs","rhs","FpIsSquare","legendreConst","Field","redef","_nLength","sqrtP","freeze","isOdd","add","div","sqrN","addN","subN","mulN","sqrt","invertBatch","lst","cmov","c","fromBytes","FpSqrtOdd","elm","FpSqrtEven","hashToPrivateScalar","groupOrder","minLen","mapHashToField","fieldLen","reduced","basex","module","bool","lengths","includes","exists","instance","checkFinished","destroyed","finished","output","min","assert","_get","_getPrototypeOf","_assertThisInitialized","buffer_1","checkUint8Array","TypeError","uint8ArrayToBuffer","Layout","span","property","isInteger","offset","RangeError","rv","constructor","prototype","values","nameWithProperty","lo","bindConstructorLayout","Class","layout","hasOwnProperty","layout_","boundConstructor_","makeDestinationObject","defineProperty","writable","ExternalLayout","_Layout","GreedyCount","_ExternalLayout","_super2","elementSpan","rem","src","OffsetLayout","_ExternalLayout2","_super3","UInt","UIntBE","_Layout2","_super4","_this3","readUIntLE","writeUIntLE","_Layout3","_super5","_this4","readUIntBE","writeUIntBE","Int","_Layout4","_super6","_this5","readIntLE","writeIntLE","IntBE","_Layout5","_super7","_this6","readIntBE","writeIntBE","V2E32","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","_Layout6","_super8","readUInt32LE","split","writeUInt32LE","NearUInt64BE","_Layout7","_super9","readUInt32BE","writeUInt32BE","NearInt64","_Layout8","_super10","readInt32LE","writeInt32LE","NearInt64BE","_Layout9","_super11","readInt32BE","writeInt32BE","Float","_Layout10","_super12","readFloatLE","writeFloatLE","FloatBE","_Layout11","_super13","readFloatBE","writeFloatBE","Double","_Layout12","_super14","readDoubleLE","writeDoubleLE","DoubleBE","_Layout13","_super15","readDoubleBE","writeDoubleBE","Sequence","_Layout14","_super16","elementLayout","count","_this7","isCount","idx","getSpan","elo","Structure","_Layout15","_super17","fields","decodePrefixes","_this8","fd","fsp","_step2","dest","_iterator2","_step3","firstOffset","lastOffset","lastWrote","_iterator3","fv","_step4","_iterator4","_step5","_iterator5","_step6","_iterator6","UnionDiscriminator","UnionLayoutDiscriminator","_UnionDiscriminator","_super18","_this9","Union","_Layout16","_super19","discr","defaultLayout","_this10","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","_Layout17","_super20","union","_this11","fromArray","fixBitwiseResult","BitStructure","_Layout18","_super21","msb","_this12","_packedSetValue","_packedGetValue","_step7","_iterator7","_step8","_iterator8","bits","bf","BitField","Boolean","_step9","_iterator9","container","totalBits","usedBits","valueMask","start","wordMask","wordValue","_BitField","_super22","Blob","_Layout19","_super23","_this13","srcBuffer","write","CString","_Layout20","_super24","srcb","copy","UTF8","_Layout21","_super25","maxSpan","_this14","Constant","_Layout22","_super26","_this15","greedy","u16","u24","u40","u48","nu64","u16be","u24be","u32be","u40be","u48be","nu64be","s8","s16","s24","s32","s40","s48","ns64","s16be","s24be","s32be","s40be","s48be","ns64be","f32","f32be","f64","f64be","struct","seq","unionLayoutDiscriminator","blob","cstr","utf8","constant","has","prefix","Events","EE","fn","context","once","this","addListener","emitter","event","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","__proto__","eventNames","events","names","getOwnPropertySymbols","listeners","handlers","l","ee","listenerCount","a1","a2","a3","a4","a5","removeListener","removeAllListeners","off","prefixed","_assert_js_1","SHA2","_utils_js_1$Hash","padOffset","view","take","subarray","process","dataView","roundClean","setBigUint64","_32n","_u32_max","wh","wl","setUint32","oview","outLen","get","digestInto","destroy","to","_to","_toConsumableArray","U32_MASK64","fromBig","le","Ah","Al","_fromBig","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","modular_js_1","wNAF","constTimeNegate","condition","item","negate","W","windows","windowSize","unsafeLadder","double","precomputeWindow","_opts","points","base","window","precomputes","_opts2","BASE","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","wNAFCached","precomputesMap","transform","_WINDOW_SIZE","comp","validateBasic","curve","Gx","Gy","os2ip","i2osp","strxor","isBytes","isNum","expand_message_xmd","DST","lenInBytes","H","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","expand_message_xof","dkLen","hash_to_field","options","expand","_DST","prb","dst","validateDST","log2p","L","len_in_bytes","elm_offset","tv","isogenyMap","COEFF","_COEFF$map","_COEFF$map2","xNum","xDen","yNum","yDen","createHasher","Point","mapToCurve","def","hashToCurve","u0","fromAffine","u1","clearCofactor","assertValidity","encodeToCurve","encodeDST","_sha2_js_1","Maj","SHA256_K","IV","SHA256_W","SHA256","_sha2_js_1$SHA","A","B","C","D","E","F","G","getUint32","W15","W2","s0","s1","T1","T2","SHA224","_SHA","sha256","sha224","ut","curve_js_1","b2n","h2b","DER","Err","_Error","DERErr","_wrapNativeSuper","_parseInt","toSig","_exports$DER$_parseIn","sBytes","_exports$DER$_parseIn2","hexFromSig","shl","rhl","rl","weierstrassPoints","CURVE","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","_c","point","_isCompressed","toAffine","tail","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","error","pointPrecomputes","Map","assertPrjPoint","other","px","py","pz","delete","_this$toAffine","left","right","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t3","t4","t5","equals","wnaf","toInv","I","_endo$splitScalar","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","_endo$splitScalar2","_this$wNAF","f1p","_this$wNAF2","f2p","_this$wNAF3","normalizeZ","multiply","multiplyUnsafe","iz","z","ax","ay","zz","cofactor","isCompressed","toRawBytes","_bits","ProjectivePoint","SWUFpSqrtRatio","o","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c5","c6","c7","sqrtRatio","tv1","tv2","tv3","tv5","tv4","isQR","tvv5","e1","y1","y2","weierstrass","curveDef","hmac","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","_weierstrassPoints","cat","hasEvenY","head","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","msgHash","rec","radj","R","fromHex","ir","u2","multiplyAndAddUnsafe","hasHighS","toDERHex","toCompactHex","_exports$DER$toSig","utils","isValidPrivateKey","randomPrivateKey","precompute","_setWindowSize","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","prehash","ent","extraEntropy","h1int","seedArgs","k2sig","kBytes","ik","normS","normalizeS","defaultVerOpts","getPublicKey","fromPrivateKey","getSharedSecret","privateA","publicB","_prepSig","drbg","verify","_Point$BASE$multiplyA","sg","_sig","fromDER","derError","fromCompact","_sig2","is","mapToCurveSimpleSWU","tv6","_sqrtRatio","rnds8","rng","msCrypto","validate","uuid","REGEX","test","byteToHex","substr","stringify","_nodeId","_clockseq","toLowerCase","_lastMSecs","_lastNSecs","v1","buf","node","clockseq","seedBytes","random","msecs","nsecs","dt","tl","tmh","parse","version","hashfunc","generateUUID","namespace","unescape","encodeURIComponent","charCodeAt","stringToBytes","DNS","URL","getOutputLength","inputLength8","safeAdd","lsw","md5cmn","t","cnt","md5ff","md5gg","md5hh","md5ii","md5","v3","v35","input","length32","hexTab","charAt","md5ToHexEncodedArray","olda","oldb","oldc","oldd","wordsToMd5","length8","bytesToWords","v4","rnds","ROTL","sha1","v5","K","N","M","_t","_t2","T","_Buffer","ALPHABET","BASE_MAP","xc","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","alloc","psz","zeroes","size","b256","carry","it3","it4","vch","allocUnsafe","isBuffer","pbegin","pend","b58","it1","it2","repeat","__createBinding","enumerable","__setModuleDefault","__decorate","decorators","target","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","deserializeUnchecked","deserialize","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","encoding","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","splice","join","maybeResize","writeUInt8","writeUInt16LE","writeBuffer","toArray","writeU32","elem","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","indexOf","readUInt8","readUInt16LE","readBuffer","readU32","capitalizeFirstLetter","toUpperCase","serializeField","schema","fieldType","writer","writeFixedArray","writeArray","kind","writeU8","serializeStruct","addToFieldPath","obj","borshSerialize","structSchema","_structSchema$values$","deserializeField","reader","readFixedArray","readArray","readU8","deserializeStruct","classType","borshDeserialize","_step2$value","_structSchema$values$2","fieldValue","inRange","max","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","unshift","pop","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","ArrayBuffer","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","stringToCodePoints","toBigIntLE","reversed","toBigIntBE","toBufferLE","width","toBufferBE","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","id","callback","self","isBatch","hasCallback","JSON","_parseResponse","responseText","isError","filter","jsonrpc","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","_isNativeReflectConstruct","Super","NewTarget","__rest","propertyIsEnumerable","CommonClient","_EventEmitter","webSocketFactory","address","_a","generate_request_id","_a$autoconnect","autoconnect","_a$reconnect","reconnect","_a$reconnect_interval","reconnect_interval","_a$max_reconnects","max_reconnects","rest_options","queue","rpc_id","ready","reconnect_timer_id","current_reconnects","_connect","socket","timeout","ws_opts","reject","send","promise","setTimeout","_login","resp","_listMethods","_subscribe","_unsubscribe","close","clearTimeout","addEventListener","notification","keys","then","reason","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","sha512_1","utils_1","edwards_js_1","montgomery_js_1","hash_to_curve_js_1","ED25519_P","ED25519_SQRT_M1","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","adjustScalarBytes","uvRatio","vx2","root1","root2","useRoot1","useRoot2","noRoot","ED25519_TORSION_SUBGROUP","ed25519Defaults","sha512","ed25519_domain","ctx","phflag","edwardsToMontgomeryPub","edwardsPub","ed25519","ExtendedPoint","twistedEdwards","ed25519ctx","domain","ed25519ph","x25519","montgomery","montgomeryBits","Gu","powPminus2","_ed25519_pow_2_252_","edwardsToMontgomery","edwardsToMontgomeryPriv","edwardsPriv","hashed","ELL2_C1","ELL2_C2","ELL2_C3","ELL2_C4","ELL2_J","ELL2_C1_EDWARDS","map_to_curve_elligator2_edwards25519","_map_to_curve_elligat","xd","x1n","gxd","gx1","y11","y12","x2n","y21","y22","gx2","e2","e3","xn","e4","xMn","xMd","yMn","yMd","map_to_curve_elligator2_curve25519","yn","yd","htf","scalars","assertRstPoint","RistPoint","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","invertSqrt","MAX_255B","bytes255ToNumberLE","calcElligatorRistrettoMap","r0","Ns","_uvRatio","Ns_D_is_sq","s_","Nt","s2","W0","W1","W3","ep","_this$ep","ex","ey","ez","et","u2sq","invsqrt","D1","D2","zInv","_y","toHex","_this$ep2","_other$ep","one","two","subtract","ap","R1","R2","_exports$ed25519$CURV","emsg","u1_2","u2_2","_invertSqrt2","Dx","Dy","RistrettoPoint","hashToRistretto255","uniform_bytes","hash_to_ristretto255","_u64_js_1","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","_u64_js_1$default$add","All","_u64_js_1$default$add2","_u64_js_1$default$add3","_u64_js_1$default$add4","_u64_js_1$default$add5","_u64_js_1$default$add6","_u64_js_1$default$add7","_u64_js_1$default$add8","_u64_js_1$default$add9","SHA512_224","SHA512_256","_SHA2","SHA384","_SHA3","sha512_224","sha512_256","sha384","globalThis","VERIFY_DEFAULT","zip215","cHash","modP","inBig","in0MaskRange","assertInRange","assertGE0","isPoint","X","Y","Z4","aX2","X1Z2","X2Z1","Y1Z2","Y2Z1","x1y1","T3","normed","lastByte","isXOdd","isLastByteOdd","getExtendedPublicKey","modN_LE","pointBytes","hashDomainToScalar","msgs","verifyOpts","_getExtendedPublicKey","SB","isSmallOrder","montgomeryBytes","cswap","swap","x_2","x_3","dummy","assertFieldElement","a24","encodeUCoordinate","scalarMult","pointU","uEnc","decodeUCoordinate","pu","sw","x_1","z_2","z_3","k_t","AA","BB","DA","CB","dacb","da_cb","z2","montgomeryLadder","decodeScalar","GuBytes","scalarMultBase","sha256_1","weierstrass_js_1","_shortw_utils_js_1","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","createCurve","POW_2_128","fe","TAGGED_HASH_PREFIXES","taggedHash","tagP","tagH","messages","pointToBytes","numTo32b","GmulAdd","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","schnorrGetPublicKey","schnorrSign","auxRand","_schnorrGetExtPubKey","rand","k_","_schnorrGetExtPubKey2","rx","schnorrVerify","pub","schnorr","isoMap","mapSWU","_mapSWU","hmac_1","getHash","defHash","HMAC","iHash","oHash","getPrototypeOf","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","keccakP","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","Keccak","suffix","enableXOF","posOut","state32","keccak","finish","bufferOut","writeInto","xofInto","sha3_224","sha3_256","sha3_384","sha3_512","keccak_224","keccak_256","keccak_384","keccak_512","genShake","shake128","shake256","toFailures","StructError","_TypeError","failure","failures","cached","rest","_objectWithoutProperties","_excluded","path","_cached","isObject","print","toFailure","branch","_result","refinement","_result$message","Symbol","iterator","_marked","run","_options$path","_options$branch","_options$coerce","coerce","_options$mask","valid","_failure","_step3$value","coercer","validator","Set","refiner","Struct","props","_props$coercer","_props$entries","tuples","tuple","_input$next","shiftIterator","define","Element","_step9$value","literal","description","never","nullable","optional","record","Key","Value","_context13","Elements","Never","_context15","_keys","_context16","Structs","_step18","_iterator18","_run","_toArray","_step19","_iterator19","unknown","generateKeypair","privateScalar","isOnCurve","_unused","toBuffer","properties","SOLANA_SCHEMA","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","_Struct2","_Symbol$toStringTag2","_bn","isPublicKeyData","decoded","BN","eq","toArrayLike","zeroPad","_createWithSeed","fromPublicKey","programId","publicKeyBytes","seeds","_createProgramAddress","createProgramAddressSync","nonce","seedsWithNonce","_findProgramAddress","findProgramAddressSync","pubkeyData","toStringTag","_class","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","_Error2","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","_Error3","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","readonly","index","keySegment","flat","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","getAlloc","getItemAlloc","decodeLength","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","mapEntries","writableSigners","isSigner","isWritable","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","_ref9","_ref11","_ref13","_ref15","lookupTable","_this$drainKeysFoundI","drainKeysFoundInLookupTable","addresses","keyMeta","isInvoked","_this$drainKeysFoundI2","writableIndexes","drainedWritableKeys","_this$drainKeysFoundI3","_this$drainKeysFoundI4","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","_loop","lookupTableIndex","findIndex","entry","getOrInsertDefault","payerKeyMeta","ix","accountMeta","Message","accountKeys","recentBlockhash","indexToProgramIds","account","numSignedAccounts","isProgramId","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","signData","_compiledKeys$getMess","compile","payerKey","getMessageComponents","_compiledKeys$getMess2","compileInstructions","byteArray","accountCount","dataSlice","MessageV0","compiledInstructions","addressTableLookups","lookup","numAccountKeysFromLookups","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","_loop2","tableLookup","tableAccount","find","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","_step10","_iterator10","encodedWritableIndexesLength","encodedReadonlyIndexesLength","_step11","compiledKeys","lookupTableAccounts","_iterator11","extractResult","extractTableLookup","_accountKeysFromLooku","_accountKeysFromLooku2","_extractResult","addressTableLookup","_extractResult$","_compiledKeys$getMess3","_compiledKeys$getMess4","maskedPrefix","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","_ref17","toJSON","Transaction","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","_ref18","items","console","warn","programIds","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","_uniqueMetas$splice","payerMeta","_step12","_iterator12","_loop3","signedKeys","unsignedKeys","_ref19","compileMessage","every","pair","_compile","_getEstimatedFee","connection","getFeeForMessage","seen","_len3","_key3","uniqueSigners","_i4","_signers","signer","_partialSign","_len4","_key4","_i5","_signers2","_len5","_key5","_addSignature","sigpair","requireAllSignatures","_verifySignatures","_step13","_iterator13","_step13$value","_Object$assign","verifySignatures","_serialize","signatureCount","transactionLength","wireTransaction","_ref20","keyObj","populate","sigPubkeyPair","isAccountSigner","isAccountWritable","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","_x10","_x11","_x12","_sendAndConfirmTransaction","_callee109","sendOptions","status","nonceAccountPubkey","_context109","skipPreflight","preflightCommitment","commitment","maxRetries","confirmTransaction","abortSignal","nonceValue","sleep","ms","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","_encodeDecode","encodeDecode","bigIntLayout","bigInt","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","chunkSize","_load","program","balanceNeeded","programInfo","dataLayout","_data","_transaction","_dataLayout","_data2","_transaction2","deployCommitment","finalizeSignature","_yield$connection$con","getMinimumBalanceForRentExemption","getAccountInfo","executable","allocate","owner","transfer","bytesLengthPadding","_rpcEndpoint","all","getSlot","slot","MS_PER_SLOT","_x13","_x14","_x15","_x16","_x17","objToString","objKeys","isArrayProp","propVal","isFinite","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","SendTransactionError","_Error4","logs","SolanaJSONRPCError","_Error5","_ref21","customMessage","fetchImpl","fetch","RpcWebSocketClient","_RpcWebSocketCommonCl","url","createRpc","underlyingSocket","_this$underlyingSocke","_get2","readyState","_len6","_key6","_this$underlyingSocke2","_get3","_len7","_key7","RpcWebSocketCommonClient","AddressLookupTableAccount","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","createRpcResult","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","endpoint","_commitmentOrConfig","wsEndpoint","httpHeaders","disableRetryOnRateLimit","httpAgent","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_ref24","_requestPromises$requ","_extractCommitmentFro","requestHash","_buildArgs","fastStableStringify$1","unsafeRes","_x22","confirmTransactionInitialTimeout","putativeUrl","assertEndpointUrl","matches","match","_matches","hostish","portWithColon","protocol","startsWith","startPort","websocketPort","makeWebsocketUrl","customFetch","fetchWithMiddleware","_ref22","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","_x18","_x19","clientBrowser","RpcClient","_ref23","too_many_requests_retries","waitTime","text","body","agent","headers","statusText","ok","_x20","_x21","createRpcClient","client","createRpcRequest","requests","batch","methodName","createRpcBatchRequest","Infinity","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_getBalanceAndContext","_callee10","_extractCommitmentFro2","_context10","_x23","_x24","_getBalance","_callee11","_context11","getBalanceAndContext","catch","_x25","_x26","_getBlockTime","_callee12","_context12","_x27","_getMinimumLedgerSlot","_callee13","_getFirstAvailableBlock","_callee14","_context14","_getSupply","_callee15","configArg","_x28","_getTokenSupply","_callee16","tokenMintAddress","_x29","_x30","_getTokenAccountBalance","_callee17","tokenAddress","_context17","_x31","_x32","_getTokenAccountsByOwner","_callee18","ownerAddress","_extractCommitmentFro3","_args","_context18","_x33","_x34","_x35","_getParsedTokenAccountsByOwner","_callee19","_context19","_x36","_x37","_x38","_getLargestAccounts","_callee20","arg","_context20","_x39","_getTokenLargestAccounts","_callee21","mintAddress","_context21","_x40","_x41","_getAccountInfoAndContext","_callee22","_extractCommitmentFro4","_context22","_x42","_x43","_getParsedAccountInfo","_callee23","_extractCommitmentFro5","_context23","_x44","_x45","_getAccountInfo","_callee24","_context24","getAccountInfoAndContext","_x46","_x47","_getMultipleParsedAccounts","_callee25","publicKeys","rawConfig","_extractCommitmentFro6","_context25","_x48","_x49","_getMultipleAccountsInfoAndContext","_callee26","_extractCommitmentFro7","_context26","_x50","_x51","_getMultipleAccountsInfo","_callee27","_context27","getMultipleAccountsInfoAndContext","_x52","_x53","_getStakeActivation","_callee28","_extractCommitmentFro8","_context28","_x54","_x55","_x56","_getProgramAccounts","_callee29","configOrCommitment","_extractCommitmentFro9","_ref26","configWithoutEncoding","baseSchema","_context29","_excluded2","withContext","_x57","_x58","_getParsedProgramAccounts","_callee30","_extractCommitmentFro10","_context30","_x59","_x60","_confirmTransaction","_callee31","strategy","rawSignature","_config$abortSignal","decodedSignature","_context31","aborted","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","_x61","_x62","signal","_ref27","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","_this16","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","_callee32","_context32","getSignatureStatus","_confirmTransactionUsingBlockHeightExceedanceStrategy","_callee35","_ref29","_ref29$strategy","expiryPromise","_this$getTransactionC","cancellationPromise","outcome","_this17","_context35","checkBlockHeight","_ref30","_callee33","_context33","_callee34","currentBlockHeight","_context34","BLOCKHEIGHT_EXCEEDED","getTransactionConfirmationPromise","getCancellationPromise","race","_x63","_confirmTransactionUsingDurableNonceStrategy","_callee38","_ref32","_ref32$strategy","_this$getTransactionC2","_signatureStatus","signatureStatus","_outcome$slotInWhichN","commitmentForStatus","_this18","_context38","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","_ref33","_callee36","_yield$_this18$getNon","_context36","getNonceAndContext","_callee37","_context37","NONCE_INVALID","slotInWhichNonceDidAdvance","_x64","_confirmTransactionUsingLegacyTimeoutStrategy","_callee39","_ref35","timeoutId","_this$getTransactionC3","_this19","_context39","timeoutMs","TIMED_OUT","_x65","_getClusterNodes","_callee40","_context40","_getVoteAccounts","_callee41","_context41","_x66","_getSlot","_callee42","_extractCommitmentFro11","_context42","_x67","_getSlotLeader","_callee43","_extractCommitmentFro12","_context43","_x68","_getSlotLeaders","_callee44","startSlot","limit","_context44","_x69","_x70","_getSignatureStatus","_callee45","_yield$this$getSignat","_context45","getSignatureStatuses","_x71","_x72","_getSignatureStatuses","_callee46","_context46","_x73","_x74","_getTransactionCount","_callee47","_extractCommitmentFro13","_context47","_x75","_getTotalSupply","_callee48","_context48","getSupply","excludeNonCirculatingAccountsList","_x76","_getInflationGovernor","_callee49","_context49","_x77","_getInflationReward","_callee50","_extractCommitmentFro14","_context50","_x78","_x79","_x80","_getInflationRate","_callee51","_context51","_getEpochInfo","_callee52","_extractCommitmentFro15","_context52","_x81","_getEpochSchedule","_callee53","epochSchedule","_context53","_getLeaderSchedule","_callee54","_context54","_getMinimumBalanceForRentExemption","_callee55","_context55","_x82","_x83","_getRecentBlockhashAndContext","_callee56","_context56","_x84","_getRecentPerformanceSamples","_callee57","_context57","_x85","_getFeeCalculatorForBlockhash","_callee58","_res$result","_context58","_x86","_x87","_getFeeForMessage","_callee59","wireMessage","_context59","_x88","_x89","_getRecentPrioritizationFees","_callee60","_config$lockedWritabl","_context60","lockedWritableAccounts","_x90","_getRecentBlockhash","_callee61","_context61","getRecentBlockhashAndContext","_x91","_getLatestBlockhash","_callee62","_context62","getLatestBlockhashAndContext","_x92","_getLatestBlockhashAndContext","_callee63","_extractCommitmentFro16","_context63","_x93","_isBlockhashValid","_callee64","_extractCommitmentFro17","_context64","_x94","_x95","_getVersion","_callee65","_context65","_getGenesisHash","_callee66","_context66","_getBlock","_callee67","_extractCommitmentFro18","_res","_res2","_context67","_buildArgsAtLeastConfirmed","transactionDetails","_ref36","_x96","_x97","_getParsedBlock","_callee68","_extractCommitmentFro19","_res3","_res4","_context68","_x98","_x99","_getBlockProduction","_callee69","extra","_context69","_excluded3","_x100","_getTransaction","_callee70","_extractCommitmentFro20","_context70","_x101","_x102","_getParsedTransaction","_callee71","_extractCommitmentFro21","_context71","_x103","_x104","_getParsedTransactions","_callee72","_extractCommitmentFro22","_this20","_context72","_x105","_x106","_getTransactions","_callee73","_extractCommitmentFro23","_this21","_context73","_x107","_x108","_getConfirmedBlock","_callee74","block","_context74","_ref37","_ref38","_x109","_x110","_getBlocks","_callee75","endSlot","_context75","_x111","_x112","_x113","_getBlockSignatures","_callee76","_context76","_x114","_x115","_getConfirmedBlockSignatures","_callee77","_context77","_x116","_x117","_getConfirmedTransaction","_callee78","_context78","_x118","_x119","_getParsedConfirmedTransaction","_callee79","_context79","_x120","_x121","_getParsedConfirmedTransactions","_callee80","_this22","_context80","_x122","_x123","_getConfirmedSignaturesForAddress","_callee81","firstAvailableBlock","highestConfirmedRoot","_block","confirmedSignatureInfo","_context81","getFirstAvailableBlock","getConfirmedBlockSignatures","until","before","getConfirmedSignaturesForAddress2","_x124","_x125","_x126","_getConfirmedSignaturesForAddress2","_callee82","_context82","_x127","_x128","_x129","_getSignaturesForAddress","_callee83","_context83","_x130","_x131","_x132","_getAddressLookupTable","_callee84","_yield$this$getAccoun","accountInfo","_context84","_x133","_x134","_getNonceAndContext","_callee85","_yield$this$getAccoun2","_context85","fromAccountData","_x135","_x136","_getNonce","_callee86","_context86","_x137","_x138","_requestAirdrop","_callee87","_context87","_x139","_x140","_blockhashWithExpiryBlockHeight2","_callee88","disableCache","timeSinceFetch","expired","_context88","_pollNewBlockhash","_x141","_pollNewBlockhash2","_callee89","startTime","cachedLatestBlockhash","cachedBlockhash","_context89","getLatestBlockhash","_getStakeMinimumDelegation","_callee90","_extractCommitmentFro24","_context90","_x142","_simulateTransaction","_callee91","transactionOrMessage","configOrSigners","includeAccounts","_wireTransaction","_encodedTransaction","_config","_args92","_unsafeRes","_res5","originalTx","_transaction3","_transaction4","_signature3","encodedTransaction","traceIndent","logTrace","_context91","_blockhashWithExpiryBlockHeight","nonProgramIds","sigVerify","_x143","_x144","_x145","_sendTransaction","_callee92","signersOrOptions","_wireTransaction2","_signature4","_context92","_x146","_x147","_x148","_sendRawTransaction","_callee93","rawTransaction","_context93","sendEncodedTransaction","_x149","_x150","_sendEncodedTransaction","_callee94","_context94","_x151","_x152","_this23","setInterval","_callee95","_context95","notify","_updateSubscriptions","_this24","MAX_SAFE_INTEGER","clearInterval","_ref40","_ref41","_setSubscription","nextSubscription","_this$_subscriptionsB","prevState","stateChangeCallbacks","_unused4","clientSubscriptionId","_this$_subscriptionSt","_this25","_updateSubscriptions2","_callee99","activeWebSocketGeneration","isCurrentConnectionStillActive","_this26","_context99","_ref42","_callee98","_context98","callbacks","serverSubscriptionId","_callee96","_context96","_callee97","unsubscribeMethod","_context97","_x153","callbackArgs","_create","_handleServerNotification","subscriptionConfig","_this27","existingSubscription","_callee100","_context100","_makeSubscription","_removeAccountChangeListener","_callee101","_context101","_unsubscribeClientSubscription","_x154","_create2","accountId","filters","_removeProgramAccountChangeListener","_callee102","_context102","_x155","mentions","_removeOnLogsListener","_callee103","_context103","_x156","_create3","_create4","_removeSlotChangeListener","_callee104","_context104","_x157","_create5","_removeSlotUpdateListener","_callee105","_context105","_x158","_unsubscribeClientSubscription2","_callee106","subscriptionName","dispose","_context106","_x159","_x160","override","_create6","_this28","_err","_this29","_options$commitment","_excluded4","_removeSignatureListener","_callee107","_context107","_x161","_create7","_removeRootChangeListener","_callee108","_context108","_x162","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","_PublicKey$findProgra","recentSlot","_PublicKey$findProgra2","lookupTableAddress","bumpSeed","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPublicKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","_params$instructionIn","ethAddressOffset","ethAddressInstructionIndex","pkey","_ecdsaSign","toCompactRawBytes","ecdsaSign","_ecdsaSign2","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","_class2","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","stakePubkey","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","voteAuthorizeWithSeedArgs","VoteProgram","Voter","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername"],"mappings":"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","file":"static/js/4.427d6270.chunk.js","sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n",null,null,"'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n",null,null,null,null,null,null,"// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;","import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;","import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  var output = [];\n  var length32 = input.length * 32;\n  var hexTab = '0123456789abcdef';\n\n  for (var i = 0; i < length32; i += 8) {\n    var x = input[i >> 5] >>> i % 32 & 0xff;\n    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  var length8 = input.length * 8;\n  var output = new Uint32Array(getOutputLength(length8));\n\n  for (var i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nexport default md5;","import v35 from './v35.js';\nimport md5 from './md5.js';\nvar v3 = v35('v3', 0x30, md5);\nexport default v3;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;","import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;","export default '00000000-0000-0000-0000-000000000000';","import validate from './validate.js';\n\nfunction version(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nexport default version;","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}",null,null,null,null,null,null,null,null,null,"import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = process.env.TEST_LIVE ? 3762 : 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n"],"sourceRoot":""}